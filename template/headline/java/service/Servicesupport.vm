#set ( $package = "${topPackage}${table.pkg}" )
#set ( $LineTable=$table.LineTable )
#set ( $LineTablePackage = "${topPackage}${LineTable.pkg}" )
package ${package}.service.impl;
//导入java类
import java.util.Map;
import java.util.List;
//导入Log
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
//导入logshang,springframework
import net.mast.util.Page;
import net.mast.util.RowSelection;
import org.springframework.beans.factory.InitializingBean;

import ${package}.service.I${table.JavaName}Service;
import ${package}.view.${table.JavaName}View;
import ${package}.data.${table.JavaName};
import ${package}.utils.${table.JavaName}ViewUtils;
import ${package}.dao.I${table.JavaName}Dao;
#if($table.hasLine())
import ${LineTablePackage}.dao.I${LineTable.JavaName}Dao;//从表的Dao
import ${LineTablePackage}.data.${LineTable.JavaName};
#end

/**
 * 功能:本类为${table.chineseDescription}的Service实现类${table.JavaName}ServiceImpl
 * 事物控制通过配置文件配置完成，实现模式为代理模式
 * @date    [$now]
 */
public class ${table.JavaName}ServiceImpl implements I${table.JavaName}Service, InitializingBean {
    private static Log log = LogFactory.getLog(${table.JavaName}ServiceImpl.class);

    private I${table.JavaName}Dao ${table.JavaName.substring(0,1).toLowerCase().concat(${table.JavaName.substring(1)})}Dao = null;    

#if($table.hasLine())
  //从表属性 ${LineTable.chineseDescription} ：${table.LineTable.name} Dao
    private I${LineTable.JavaName}Dao ${LineTable.JavaName.substring(0,1).toLowerCase().concat(${LineTable.JavaName.substring(1)})}Dao = null;

    public I${LineTable.JavaName}Dao get${LineTable.JavaName}Dao() {
        return ${LineTable.JavaName.substring(0,1).toLowerCase().concat(${LineTable.JavaName.substring(1)})}Dao;
    }
    public void set${LineTable.JavaName}Dao(I${LineTable.JavaName}Dao dao) {
        ${LineTable.JavaName.substring(0,1).toLowerCase().concat(${LineTable.JavaName.substring(1)})}Dao = dao;
    }
#end
        
    /**
     * 删除	${table.chineseDescription}	一条记录
     * @param #parse("pk/pk.vm")
     
     */
    public int delete${table.JavaName}(#parse("pk/pkA.vm")) {
        #parse("pk/pkF.vm")
       int result = get${table.JavaName}Dao().delete${table.JavaName}(#parse("pk/pkTo.vm"));                    
#if($table.hasLine())
       //下面需要执行删除子表数据：根据主表的ID进行子表数据删除      	
      	this.get${LineTable.JavaName}Dao().deleteBy${table.JavaName}(#parse("pk/pkTo.vm"));
#end
       return result;        
    }
    /**
     * @param #parse("pk/pk.vm")
     批量删除
     */
    public int batchdelete${table.JavaName}(#parse("pk/batchpkA.vm")){
        #parse("pk/batchpkF.vm")
       int result = get${table.JavaName}Dao().batchdelete${table.JavaName}(#parse("pk/pkTo.vm"));                    
#if($table.hasLine())
      //下面需要执行删除子表数据：根据主表的ID进行子表数据删除  
     	//多个主键的时候，需要自己改一下代码才能用
     	for(int i=0;i<#parse("pk/batchpkO.vm").length;i++){
      	this.get${LineTable.JavaName}Dao().deleteBy${table.JavaName}(#parse("pk/batchpkO.vm")[i]);
     	}
#end
       return result;
    }
    
    /**
     * 取得	${table.chineseDescription}	一条明细
     * @param #parse("pk/pk.vm")
     
     * @return
     */
    public ${table.JavaName}View get${table.JavaName}View(#parse("pk/pkA.vm")) {    
        ${table.JavaName} ${strings.lowercaseFirstLetter($table.JavaName)} = get${table.JavaName}Dao().get${table.JavaName}( #parse("pk/pk.vm"));                
#if($table.hasLine())
       #parse("pk/pkF.vm")
       //下面需要执行删除子表数据：根据主表的ID进行子表数据删除      	
      	List sub= this.get${LineTable.JavaName}Dao().findBy${table.JavaName}(#parse("pk/pkTo.vm"));
      	${strings.lowercaseFirstLetter($table.JavaName)}.setList${LineTable.JavaName}(sub);
#end                
        return ${table.JavaName}ViewUtils.get${table.JavaName}View(${strings.lowercaseFirstLetter($table.JavaName)});
    }
    /**
	 * 根据自行拼装的条件查找一条数据
	 * @param condition 条件需要以 and 开头
	 * @return
	 */
	public ${table.JavaName}View findByCondition(String condition){
		${table.JavaName} ob= this.get${table.JavaName}Dao().findByCondition(condition);
		return ${table.JavaName}ViewUtils.get${table.JavaName}View(ob);
	}
    /**
     * 查询	${table.chineseDescription}	一页记录
     * @param rowSelection
     * @param map
     * @return
     */
    public Page getAll${table.JavaName}(
    	final RowSelection rowSelection,
    	final Map map){
        Page page = get${table.JavaName}Dao().getAll${table.JavaName}(rowSelection, map);
        page.setDatas(${table.JavaName}ViewUtils.get${table.JavaName}ListView(page.getDatas()));
        
        return page;
    }
    /**
     * 查询	${table.chineseDescription}	全部记录
     * @param map
     * @return
     */
	public List getAll${table.JavaName}NoPage(
		final Map map){
        List datas = get${table.JavaName}Dao().getAll${table.JavaName}NoPage(map);
        datas = ${table.JavaName}ViewUtils.get${table.JavaName}ListView(datas);
        
        return datas; 
    }

    /**
     * 插入	${table.chineseDescription}	一条记录
     * @param ${strings.lowercaseFirstLetter($table.JavaName)}
     * @return
     */
    public ${table.JavaName}View insert${table.JavaName}(${table.JavaName}View ${strings.lowercaseFirstLetter($table.JavaName)}View) {
        ${table.JavaName} ob = ${table.JavaName}ViewUtils.get${table.JavaName}(${strings.lowercaseFirstLetter($table.JavaName)}View);

        Object result = get${table.JavaName}Dao().insert${table.JavaName}(ob);
#if($table.hasLine())
      	//下面还需要插入子表数据,插入方式可以考虑优化成批量插入的方式
        List sublist = ob.getList${LineTable.JavaName}();
        for(int i=0;i<sublist.size();i++){
        	${LineTable.JavaName} subdata= (${LineTable.JavaName}) sublist.get(i);
        	//可能需要自行再次设置主键和外键
        	this.get${LineTable.JavaName}Dao().insert${LineTable.JavaName}(subdata);
        }
#end      
		return ${table.JavaName}ViewUtils.get${table.JavaName}View(ob);
    }

    /**
     * 修改	${table.chineseDescription}	一条记录
     * @param ${strings.lowercaseFirstLetter($table.JavaName)}
     * @return
     */
    public ${table.JavaName}View update${table.JavaName}(${table.JavaName}View ${strings.lowercaseFirstLetter($table.JavaName)}View) {
        ${table.JavaName} ob = ${table.JavaName}ViewUtils.get${table.JavaName}(${strings.lowercaseFirstLetter($table.JavaName)}View);

       boolean result = get${table.JavaName}Dao().update${table.JavaName}(ob);
#if($table.hasLine())
      	//下面还需要修改子表数据,先删除数据，再插入方式可以考虑优化成批量插入的方式
      	//1.删除,根据主表的ID删除从表的数据
#foreach ($col in $table.PrimaryKeys)
#set ( $cfc=$col.JavaName )
#if ( $col.JavaType=="int" )
		int ${strings.lowercaseFirstLetter(${col.JavaName})} = ob.get${cfc}();
#elseif ( $col.JavaType=="double" )	
		double ${strings.lowercaseFirstLetter(${col.JavaName})}	=ob.get${cfc}();				
#else
		String ${strings.lowercaseFirstLetter(${col.JavaName})}	=ob.get${cfc}(); 
#end
#end      	
      	this.get${LineTable.JavaName}Dao().deleteBy${table.JavaName}(#parse("pk/pk.vm"));
      	//2.插入
        List sublist = ob.getList${LineTable.JavaName}();
        for(int i=0;i<sublist.size();i++){
        	${LineTable.JavaName} subdata= (${LineTable.JavaName}) sublist.get(i);
        	//可能需要自行再次设置主键和外键
        	this.get${LineTable.JavaName}Dao().insert${LineTable.JavaName}(subdata);
        }
#end 
	//	return  ${strings.lowercaseFirstLetter($table.JavaName)}View;
       return ${table.JavaName}ViewUtils.get${table.JavaName}View(new${table.JavaName});
    }

     public I${table.JavaName}Dao get${table.JavaName}Dao() {
        return ${table.JavaName.substring(0,1).toLowerCase().concat(${table.JavaName.substring(1)})}Dao;
    }

    public void set${table.JavaName}Dao(I${table.JavaName}Dao dao) {
        ${table.JavaName.substring(0,1).toLowerCase().concat(${table.JavaName.substring(1)})}Dao = dao;
    }

	public void afterPropertiesSet() throws Exception {
        if (get${table.JavaName}Dao() == null) {
        	log.error("${table.JavaName}ServiceSupport配置错误,属性${table.JavaName.substring(0,1).toLowerCase().concat(${table.JavaName.substring(1)})}Dao不能为空");
            throw new RuntimeException("${table.JavaName}ServiceSupport配置错误,属性${table.JavaName.substring(0,1).toLowerCase().concat(${table.JavaName.substring(1)})}Dao不能为空");
        }
	}

}
